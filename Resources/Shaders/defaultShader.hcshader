
/* ---- VERTEX SHADER ---- */

#version 420 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
layout (location = 2) in vec2 aTexCoord;
layout (location = 3) in vec3 aNormal;

uniform mat4 u_ProjectionMatrix;
uniform mat4 u_ViewMatrix;
uniform mat4 u_ModelMatrix;
uniform float u_Time;

out vec2 ourTexCoord;
out vec3 ourColor;
out vec3 ourNormal;
out vec3 FragPos;
void main() {

    float timeT = u_Time;
    gl_Position = u_ProjectionMatrix * u_ViewMatrix * u_ModelMatrix * vec4(aPos.x, aPos.y, aPos.z, 1.0);
    FragPos = vec3(u_ModelMatrix * vec4(aPos, 1.0));
    ourColor = aColor;
    ourTexCoord = aTexCoord;

    // Calculating Normal matrix to avoid scaling issues
    ourNormal = aNormal;

}

/* ---- FRAGMENT SHADER ---- */

#version 420 core

out vec4 FragColor;
in vec3 ourColor;
in vec2 ourTexCoord;
in vec3 ourNormal;
in vec3 FragPos;
layout (binding = 0) uniform Lights
{
    float ambientLightIntensity;
    vec3 lightPos;
    vec3 lightColor;
};

layout (binding = 1) uniform Camera
{
    vec3 viewPos;
};

uniform sampler2D ourTexture;


vec4 AmbientLighting() {
    float ambientStrength = ambientLightIntensity;
    vec3 sourceLightColor = lightColor;
    vec3 ambient = ambientStrength * sourceLightColor;

    vec3 result = ambient * ourColor;
    return vec4(result, 1.0);
}

vec4 diffuseLighting() {

    vec3 norm = normalize(ourNormal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    return vec4(diffuse, 1.0);
}

vec4 specularLighting() {
    vec3 viewerPos = viewPos;
    vec3 norm = normalize(ourNormal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewerPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
    return vec4(specular, 1.0);
}



void main() {

    //FragColor = ;
    vec4 texColor = texture(ourTexture, ourTexCoord);
        vec4 ambient = AmbientLighting();
        vec4 diffuse = diffuseLighting();
        vec4 specular = specularLighting();

        /* Combine ambient and diffuse with the texture, then add specular lighting */
        FragColor = (ambient + diffuse  + specular ) * texColor;
}



